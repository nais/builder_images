#/usr/bin/env bash
set -e
if [[ $# -lt 3 ]]; then
  echo "Usage: $0 <namespace> <kube_context> <files...>"
  exit 1
fi

namespace=$1
context=$2

jq=$(command -v jq)
yq=$(command -v yq)
release_names=()

bashscape() {
  local name
  local release_file
  local chart
  local chart_name
  local chart_version
  local values
  local release_name
  local name_override

  release_file="$1"
  name=$(basename "$release_file" .yaml)
  name_override="$($yq read "$release_file" 'name')"
  if [[ ! ("$name_override" == "null" || -z "$name_override") ]]; then
    name=$name_override
  fi

  values="$(mktemp)"
  release_name="${namespace}-${name}"
  release_names+=("$release_name")
  $yq read "$release_file" 'configuration' > "$values"

  chart="$($yq read "$release_file" 'release.chart')"
  if [[ "$chart" == *":"* ]]; then
    chart_name=$(echo "$chart" | cut -d ':' -f 1)
    chart_version=$(echo "$chart" | cut -d ':' -f 2)
  else
    chart_name="$chart"
    chart_version="" # Empty == latest
  fi

  helm upgrade "$release_name" "$chart_name" --wait --kube-context "$context" --namespace "$namespace" --values "$values" --version "$chart_version" --install

  rm -f "$values"
}

purge_old_releases() {
  local releases_after_bashscape
  local release_name
  releases_after_bashscape=$(helm list --kube-context "$context" --namespace "$namespace" --output json | $jq -r ".Releases[] | .Name")

  for release_name in $releases_after_bashscape; do
    if [[ " ${release_names[*]} " == *" ${release_name} "* ]]; then
      echo "release $release_name present, as it should be"
      continue
    fi

    echo "release $release_name present, but shouldn't be. Removing"
    helm delete --kube-context "$context" --purge "$release_name"
  done
}

for release_file in "${@:3}"; do
  echo "Processing $release_file"
  bashscape "$release_file"
done

purge_old_releases
